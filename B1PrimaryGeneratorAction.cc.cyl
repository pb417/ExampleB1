//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id: B1PrimaryGeneratorAction.cc 94307 2015-11-11 13:42:46Z gcosmo $
//
/// \file B1PrimaryGeneratorAction.cc
/// \brief Implementation of the B1PrimaryGeneratorAction class

#include "B1PrimaryGeneratorAction.hh"

#include "G4LogicalVolumeStore.hh"
#include "G4LogicalVolume.hh"
#include "G4Box.hh"
#include "G4Tubs.hh"
#include "G4RunManager.hh"
#include "G4ParticleGun.hh"
#include "G4ParticleTable.hh"
#include "G4ParticleDefinition.hh"
#include "G4SystemOfUnits.hh"
#include "Randomize.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B1PrimaryGeneratorAction::B1PrimaryGeneratorAction()
: G4VUserPrimaryGeneratorAction(),
  fParticleGun(0), 
  fEnvelopeBox(0)
{
  G4int n_particle = 1;
  fParticleGun  = new G4ParticleGun(n_particle);

  // default particle kinematic
  G4ParticleTable* particleTable = G4ParticleTable::GetParticleTable();
  G4String particleName;
  G4ParticleDefinition* particle
    = particleTable->FindParticle(particleName="gamma");
  fParticleGun->SetParticleDefinition(particle);

  //Components of momentum

  fParticleGun->SetParticleMomentumDirection(G4ThreeVector(0., 0., 1.));
  fParticleGun->SetParticleEnergy(3.*MeV);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B1PrimaryGeneratorAction::~B1PrimaryGeneratorAction()
{
  delete fParticleGun;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void B1PrimaryGeneratorAction::GeneratePrimaries(G4Event* anEvent)
{
  //This function is called at the begining of each event

  //Momentum Components
  
  G4double px ,py, pz;
  px =  G4UniformRand()-0.5; //A random number between -0.5 and 0.5 is generated
  py =  G4UniformRand()-0.5;
  pz = G4UniformRand()-0.5;

  std::cout << "MOMENT COMPONENTS(" <<  px << ", " << py << ", " << pz << ")" << std::endl;

  fParticleGun->SetParticleMomentumDirection(G4ThreeVector(px, py, pz).unit());
  
  // In order to avoid dependence of PrimaryGeneratorAction
  // on DetectorConstruction class we get Envelope volume
  // from G4LogicalVolumeStore.

  
  G4double envSizeXY = 0.*m;
  G4double envSizeZ = 0.*m;
 

  if (!fEnvelopeBox)
  {
    // std::cout << "I'VE ENTERED THE 1st IF\n" << std::endl;
    
    G4LogicalVolume* envLV
      = G4LogicalVolumeStore::GetInstance()->GetVolume("World");
    if ( envLV ) fEnvelopeBox = dynamic_cast<G4Box*>(envLV->GetSolid());
  }
  
 
  if ( fEnvelopeBox ) {
    // std::cout << "I'VE ENTERED THE 2nd IF\n" << std::endl;

    envSizeXY = fEnvelopeBox->GetXHalfLength()*2.;
    envSizeZ = fEnvelopeBox->GetZHalfLength()*2.;
  }  
  else  {
    //std::cout << "I'VE ENTERED THE ELSE\n" << std::endl;

    G4ExceptionDescription msg;
    msg << "Envelope volume of box shape not found.\n"; 
    msg << "Perhaps you have changed geometry.\n";
    msg << "The gun will be place at the center.";
    G4Exception("B1PrimaryGeneratorAction::GeneratePrimaries()",
     "MyCode0002",JustWarning,msg);
  }
  
  
  //Get the Cylinder shape

  G4double cylRad = 0.;
  G4double cylZ = 0.;
  
  G4LogicalVolume* cylLV 
    = G4LogicalVolumeStore::GetInstance()->GetVolume("Tank2");
  G4Tubs* cyl; //Solid Volume
   if ( cylLV ) cyl = dynamic_cast<G4Tubs*>(cylLV->GetSolid());

  cylRad = cyl->GetOuterRadius();
  cylZ = cyl->GetZHalfLength()*2.;

  
  // Initial position of the particles
  
  G4double rnd = G4UniformRand();
  G4double x0, y0, z0;
  G4ThreeVector pos;

  pos.setRhoPhiZ(cylRad, 180.*deg, cylZ);

  std::cout << "RAD = " << cylRad << std::endl;
  
  if(rnd < (1./3.))
  {
    x0 = -0.5* envSizeXY;
    y0 = envSizeXY * (G4UniformRand()-0.5);
    z0 = envSizeZ * (G4UniformRand()-0.5);
    if (rnd < 1./6.)
      {
	x0 = -x0;
      }
  }
  
  if(rnd >= (1./3.) && rnd < (2./3.))
  {
    x0 = envSizeXY * (G4UniformRand()-0.5);
    y0 = -0.5* envSizeXY;
    z0 = envSizeXY * (G4UniformRand()-0.5);
    if (rnd < 0.5)
      {
	y0 = -y0;
      }
  }

  else
  {
    x0 = envSizeXY * (G4UniformRand()-0.5);
    y0 = envSizeXY * (G4UniformRand()-0.5);
    z0 = -0.5* envSizeZ;
    if (rnd < (5./6.))
      {
	z0 = -z0;
      }
  }
  
  
  fParticleGun->SetParticlePosition(G4ThreeVector(pos));
  
  fParticleGun->GeneratePrimaryVertex(anEvent);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

